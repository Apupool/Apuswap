# @title Apuswap Exchange Interface V1
# @notice Source code found at https://github.com/Apupool
# @notice Use at your own risk

contract Factory():
    def getExchange(token_addr: address) -> address: constant

contract Exchange():
    def getznnToTokenOutputPrice(tokens_bought: uint256) -> uint256(sigli): constant
    def znnToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256: modifying
    def znnToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(sigli): modifying

TokenPurchase: event({buyer: indexed(address), znn_sold: indexed(uint256(sigli)), tokens_bought: indexed(uint256)})
znnPurchase: event({buyer: indexed(address), tokens_sold: indexed(uint256), znn_bought: indexed(uint256(sigli))})
AddLiquidity: event({provider: indexed(address), znn_amount: indexed(uint256(sigli)), token_amount: indexed(uint256)})
RemoveLiquidity: event({provider: indexed(address), znn_amount: indexed(uint256(sigli)), token_amount: indexed(uint256)})
Transfer: event({_from: indexed(address), _to: indexed(address), _value: uint256})
Approval: event({_owner: indexed(address), _spender: indexed(address), _value: uint256})

name: public(bytes32)                             # Apuswap V1
symbol: public(bytes32)                           # apu-V1
decimals: public(uint256)                         # 18
totalSupply: public(uint256)                      # total number of apu in existence
balances: uint256[address]                        # apu balance of an address
allowances: (uint256[address])[address]           # apu allowance of one address on another
token: address(zts)                             # address of the zts token traded on this contract
factory: Factory                                  # interface for the factory that created this contract

# @dev This function acts as a contract constructor which is not currently supported in contracts deployed
#      using create_with_code_of(). It is called once by the factory during contract creation.
@public
def setup(token_addr: address):
    assert (self.factory == Z_ADDRESS and self.token == Z_ADDRESS) and token_addr != Z_ADDRESS
    self.factory = msg.sender
    self.token = token_addr
    self.name = 0x556e697377617020563100000000000000000000000000000000000000000000
    self.symbol = 0x554e492d56310000000000000000000000000000000000000000000000000000
    self.decimals = 18

# @notice Deposit znn and Tokens (self.token) at current ratio to mint apu tokens.
# @dev min_liquidity does nothing when total apu supply is 0.
# @param min_liquidity Minimum number of apu sender will mint if total apu supply is greater than 0.
# @param max_tokens Maximum number of tokens deposited. Deposits max amount if total apu supply is 0.
# @param deadline Time after which this transaction can no longer be executed.
# @return The amount of apu minted.
@public
@payable
def addLiquidity(min_liquidity: uint256, max_tokens: uint256, deadline: timestamp) -> uint256:
    assert deadline > block.timestamp and (max_tokens > 0 and msg.value > 0)
    total_liquidity: uint256 = self.totalSupply
    if total_liquidity > 0:
        assert min_liquidity > 0
        znn_reserve: uint256(sigli) = self.balance - msg.value
        token_reserve: uint256 = self.token.balanceOf(self)
        token_amount: uint256 = msg.value * token_reserve / znn_reserve + 1
        liquidity_minted: uint256 = msg.value * total_liquidity / znn_reserve
        assert max_tokens >= token_amount and liquidity_minted >= min_liquidity
        self.balances[msg.sender] += liquidity_minted
        self.totalSupply = total_liquidity + liquidity_minted
        assert self.token.transferFrom(msg.sender, self, token_amount)
        log.AddLiquidity(msg.sender, msg.value, token_amount)
        log.Transfer(Z_ADDRESS, msg.sender, liquidity_minted)
        return liquidity_minted
    else:
        assert (self.factory != Z_ADDRESS and self.token != Z_ADDRESS) and msg.value >= 1000000000
        assert self.factory.getExchange(self.token) == self
        token_amount: uint256 = max_tokens
        initial_liquidity: uint256 = as_unitless_number(self.balance)
        self.totalSupply = initial_liquidity
        self.balances[msg.sender] = initial_liquidity
        assert self.token.transferFrom(msg.sender, self, token_amount)
        log.AddLiquidity(msg.sender, msg.value, token_amount)
        log.Transfer(Z_ADDRESS, msg.sender, initial_liquidity)
        return initial_liquidity

# @dev Burn apu tokens to withdraw znn and Tokens at current ratio.
# @param amount Amount of apu burned.
# @param min_znn Minimum znn withdrawn.
# @param min_tokens Minimum Tokens withdrawn.
# @param deadline Time after which this transaction can no longer be executed.
# @return The amount of znn and Tokens withdrawn.
@public
def removeLiquidity(amount: uint256, min_znn: uint256(sigli), min_tokens: uint256, deadline: timestamp) -> (uint256(sigli), uint256):
    assert (amount > 0 and deadline > block.timestamp) and (min_znn > 0 and min_tokens > 0)
    total_liquidity: uint256 = self.totalSupply
    assert total_liquidity > 0
    token_reserve: uint256 = self.token.balanceOf(self)
    znn_amount: uint256(sigli) = amount * self.balance / total_liquidity
    token_amount: uint256 = amount * token_reserve / total_liquidity
    assert znn_amount >= min_znn and token_amount >= min_tokens
    self.balances[msg.sender] -= amount
    self.totalSupply = total_liquidity - amount
    send(msg.sender, znn_amount)
    assert self.token.transfer(msg.sender, token_amount)
    log.RemoveLiquidity(msg.sender, znn_amount, token_amount)
    log.Transfer(msg.sender, Z_ADDRESS, amount)
    return znn_amount, token_amount

# @dev Pricing function for converting between znn and Tokens.
# @param input_amount Amount of znn or Tokens being sold.
# @param input_reserve Amount of znn or Tokens (input type) in exchange reserves.
# @param output_reserve Amount of znn or Tokens (output type) in exchange reserves.
# @return Amount of znn or Tokens bought.
@private
@constant
def getInputPrice(input_amount: uint256, input_reserve: uint256, output_reserve: uint256) -> uint256:
    assert input_reserve > 0 and output_reserve > 0
    input_amount_with_fee: uint256 = input_amount * 997
    numerator: uint256 = input_amount_with_fee * output_reserve
    denominator: uint256 = (input_reserve * 1000) + input_amount_with_fee
    return numerator / denominator

# @dev Pricing function for converting between znn and Tokens.
# @param output_amount Amount of znn or Tokens being bought.
# @param input_reserve Amount of znn or Tokens (input type) in exchange reserves.
# @param output_reserve Amount of znn or Tokens (output type) in exchange reserves.
# @return Amount of znn or Tokens sold.
@private
@constant
def getOutputPrice(output_amount: uint256, input_reserve: uint256, output_reserve: uint256) -> uint256:
    assert input_reserve > 0 and output_reserve > 0
    numerator: uint256 = input_reserve * output_amount * 1000
    denominator: uint256 = (output_reserve - output_amount) * 997
    return numerator / denominator + 1

@private
def znnToTokenInput(znn_sold: uint256(sigli), min_tokens: uint256, deadline: timestamp, buyer: address, recipient: address) -> uint256:
    assert deadline >= block.timestamp and (znn_sold > 0 and min_tokens > 0)
    token_reserve: uint256 = self.token.balanceOf(self)
    tokens_bought: uint256 = self.getInputPrice(as_unitless_number(znn_sold), as_unitless_number(self.balance - znn_sold), token_reserve)
    assert tokens_bought >= min_tokens
    assert self.token.transfer(recipient, tokens_bought)
    log.TokenPurchase(buyer, znn_sold, tokens_bought)
    return tokens_bought

# @notice Convert znn to Tokens.
# @dev User specifies exact input (msg.value).
# @dev User cannot specify minimum output or deadline.
@public
@payable
def __default__():
    self.znnToTokenInput(msg.value, 1, block.timestamp, msg.sender, msg.sender)

# @notice Convert znn to Tokens.
# @dev User specifies exact input (msg.value) and minimum output.
# @param min_tokens Minimum Tokens bought.
# @param deadline Time after which this transaction can no longer be executed.
# @return Amount of Tokens bought.
@public
@payable
def znnToTokenSwapInput(min_tokens: uint256, deadline: timestamp) -> uint256:
    return self.znnToTokenInput(msg.value, min_tokens, deadline, msg.sender, msg.sender)

# @notice Convert znn to Tokens and transfers Tokens to recipient.
# @dev User specifies exact input (msg.value) and minimum output
# @param min_tokens Minimum Tokens bought.
# @param deadline Time after which this transaction can no longer be executed.
# @param recipient The address that receives output Tokens.
# @return Amount of Tokens bought.
@public
@payable
def znnToTokenTransferInput(min_tokens: uint256, deadline: timestamp, recipient: address) -> uint256:
    assert recipient != self and recipient != Z_ADDRESS
    return self.znnToTokenInput(msg.value, min_tokens, deadline, msg.sender, recipient)

@private
def znnToTokenOutput(tokens_bought: uint256, max_znn: uint256(sigli), deadline: timestamp, buyer: address, recipient: address) -> uint256(sigli):
    assert deadline >= block.timestamp and (tokens_bought > 0 and max_znn > 0)
    token_reserve: uint256 = self.token.balanceOf(self)
    znn_sold: uint256 = self.getOutputPrice(tokens_bought, as_unitless_number(self.balance - max_znn), token_reserve)
    # Throws if znn_sold > max_znn
    znn_refund: uint256(sigli) = max_znn - as_sigli_value(znn_sold, 'sigli')
    if znn_refund > 0:
        send(buyer, znn_refund)
    assert self.token.transfer(recipient, tokens_bought)
    log.TokenPurchase(buyer, as_sigli_value(znn_sold, 'sigli'), tokens_bought)
    return as_sigli_value(znn_sold, 'sigli')

# @notice Convert znn to Tokens.
# @dev User specifies maximum input (msg.value) and exact output.
# @param tokens_bought Amount of tokens bought.
# @param deadline Time after which this transaction can no longer be executed.
# @return Amount of znn sold.
@public
@payable
def znnToTokenSwapOutput(tokens_bought: uint256, deadline: timestamp) -> uint256(sigli):
    return self.znnToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, msg.sender)

# @notice Convert znn to Tokens and transfers Tokens to recipient.
# @dev User specifies maximum input (msg.value) and exact output.
# @param tokens_bought Amount of tokens bought.
# @param deadline Time after which this transaction can no longer be executed.
# @param recipient The address that receives output Tokens.
# @return Amount of znn sold.
@public
@payable
def znnToTokenTransferOutput(tokens_bought: uint256, deadline: timestamp, recipient: address) -> uint256(sigli):
    assert recipient != self and recipient != Z_ADDRESS
    return self.znnToTokenOutput(tokens_bought, msg.value, deadline, msg.sender, recipient)

@private
def tokenToznnInput(tokens_sold: uint256, min_znn: uint256(sigli), deadline: timestamp, buyer: address, recipient: address) -> uint256(sigli):
    assert deadline >= block.timestamp and (tokens_sold > 0 and min_znn > 0)
    token_reserve: uint256 = self.token.balanceOf(self)
    znn_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))
    sigli_bought: uint256(sigli) = as_sigli_value(znn_bought, 'sigli')
    assert sigli_bought >= min_znn
    send(recipient, sigli_bought)
    assert self.token.transferFrom(buyer, self, tokens_sold)
    log.znnPurchase(buyer, tokens_sold, sigli_bought)
    return sigli_bought


# @notice Convert Tokens to znn.
# @dev User specifies exact input and minimum output.
# @param tokens_sold Amount of Tokens sold.
# @param min_znn Minimum znn purchased.
# @param deadline Time after which this transaction can no longer be executed.
# @return Amount of znn bought.
@public
def tokenToznnSwapInput(tokens_sold: uint256, min_znn: uint256(sigli), deadline: timestamp) -> uint256(sigli):
    return self.tokenToznnInput(tokens_sold, min_znn, deadline, msg.sender, msg.sender)

# @notice Convert Tokens to znn and transfers znn to recipient.
# @dev User specifies exact input and minimum output.
# @param tokens_sold Amount of Tokens sold.
# @param min_znn Minimum znn purchased.
# @param deadline Time after which this transaction can no longer be executed.
# @param recipient The address that receives output znn.
# @return Amount of znn bought.
@public
def tokenToznnTransferInput(tokens_sold: uint256, min_znn: uint256(sigli), deadline: timestamp, recipient: address) -> uint256(sigli):
    assert recipient != self and recipient != Z_ADDRESS
    return self.tokenToznnInput(tokens_sold, min_znn, deadline, msg.sender, recipient)

@private
def tokenToznnOutput(znn_bought: uint256(sigli), max_tokens: uint256, deadline: timestamp, buyer: address, recipient: address) -> uint256:
    assert deadline >= block.timestamp and znn_bought > 0
    token_reserve: uint256 = self.token.balanceOf(self)
    tokens_sold: uint256 = self.getOutputPrice(as_unitless_number(znn_bought), token_reserve, as_unitless_number(self.balance))
    # tokens sold is always > 0
    assert max_tokens >= tokens_sold
    send(recipient, znn_bought)
    assert self.token.transferFrom(buyer, self, tokens_sold)
    log.znnPurchase(buyer, tokens_sold, znn_bought)
    return tokens_sold

# @notice Convert Tokens to znn.
# @dev User specifies maximum input and exact output.
# @param znn_bought Amount of znn purchased.
# @param max_tokens Maximum Tokens sold.
# @param deadline Time after which this transaction can no longer be executed.
# @return Amount of Tokens sold.
@public
def tokenToznnSwapOutput(znn_bought: uint256(sigli), max_tokens: uint256, deadline: timestamp) -> uint256:
    return self.tokenToznnOutput(znn_bought, max_tokens, deadline, msg.sender, msg.sender)

# @notice Convert Tokens to znn and transfers znn to recipient.
# @dev User specifies maximum input and exact output.
# @param znn_bought Amount of znn purchased.
# @param max_tokens Maximum Tokens sold.
# @param deadline Time after which this transaction can no longer be executed.
# @param recipient The address that receives output znn.
# @return Amount of Tokens sold.
@public
def tokenToznnTransferOutput(znn_bought: uint256(sigli), max_tokens: uint256, deadline: timestamp, recipient: address) -> uint256:
    assert recipient != self and recipient != Z_ADDRESS
    return self.tokenToznnOutput(znn_bought, max_tokens, deadline, msg.sender, recipient)

@private
def tokenToTokenInput(tokens_sold: uint256, min_tokens_bought: uint256, min_znn_bought: uint256(sigli), deadline: timestamp, buyer: address, recipient: address, exchange_addr: address) -> uint256:
    assert (deadline >= block.timestamp and tokens_sold > 0) and (min_tokens_bought > 0 and min_znn_bought > 0)
    assert exchange_addr != self and exchange_addr != Z_ADDRESS
    token_reserve: uint256 = self.token.balanceOf(self)
    znn_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))
    sigli_bought: uint256(sigli) = as_sigli_value(znn_bought, 'sigli')
    assert sigli_bought >= min_znn_bought
    assert self.token.transferFrom(buyer, self, tokens_sold)
    tokens_bought: uint256 = Exchange(exchange_addr).znnToTokenTransferInput(min_tokens_bought, deadline, recipient, value=sigli_bought)
    log.znnPurchase(buyer, tokens_sold, sigli_bought)
    return tokens_bought

# @notice Convert Tokens (self.token) to Tokens (token_addr).
# @dev User specifies exact input and minimum output.
# @param tokens_sold Amount of Tokens sold.
# @param min_tokens_bought Minimum Tokens (token_addr) purchased.
# @param min_znn_bought Minimum znn purchased as intermediary.
# @param deadline Time after which this transaction can no longer be executed.
# @param token_addr The address of the token being purchased.
# @return Amount of Tokens (token_addr) bought.
@public
def tokenToTokenSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_znn_bought: uint256(sigli), deadline: timestamp, token_addr: address) -> uint256:
    exchange_addr: address = self.factory.getExchange(token_addr)
    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_znn_bought, deadline, msg.sender, msg.sender, exchange_addr)

# @notice Convert Tokens (self.token) to Tokens (token_addr) and transfers
#         Tokens (token_addr) to recipient.
# @dev User specifies exact input and minimum output.
# @param tokens_sold Amount of Tokens sold.
# @param min_tokens_bought Minimum Tokens (token_addr) purchased.
# @param min_znn_bought Minimum znn purchased as intermediary.
# @param deadline Time after which this transaction can no longer be executed.
# @param recipient The address that receives output znn.
# @param token_addr The address of the token being purchased.
# @return Amount of Tokens (token_addr) bought.
@public
def tokenToTokenTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_znn_bought: uint256(sigli), deadline: timestamp, recipient: address, token_addr: address) -> uint256:
    exchange_addr: address = self.factory.getExchange(token_addr)
    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_znn_bought, deadline, msg.sender, recipient, exchange_addr)

@private
def tokenToTokenOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_znn_sold: uint256(sigli), deadline: timestamp, buyer: address, recipient: address, exchange_addr: address) -> uint256:
    assert deadline >= block.timestamp and (tokens_bought > 0 and max_znn_sold > 0)
    assert exchange_addr != self and exchange_addr != Z_ADDRESS
    znn_bought: uint256(sigli) = Exchange(exchange_addr).getznnToTokenOutputPrice(tokens_bought)
    token_reserve: uint256 = self.token.balanceOf(self)
    tokens_sold: uint256 = self.getOutputPrice(as_unitless_number(znn_bought), token_reserve, as_unitless_number(self.balance))
    # tokens sold is always > 0
    assert max_tokens_sold >= tokens_sold and max_znn_sold >= znn_bought
    assert self.token.transferFrom(buyer, self, tokens_sold)
    znn_sold: uint256(sigli) = Exchange(exchange_addr).znnToTokenTransferOutput(tokens_bought, deadline, recipient, value=znn_bought)
    log.znnPurchase(buyer, tokens_sold, znn_bought)
    return tokens_sold

# @notice Convert Tokens (self.token) to Tokens (token_addr).
# @dev User specifies maximum input and exact output.
# @param tokens_bought Amount of Tokens (token_addr) bought.
# @param max_tokens_sold Maximum Tokens (self.token) sold.
# @param max_znn_sold Maximum znn purchased as intermediary.
# @param deadline Time after which this transaction can no longer be executed.
# @param token_addr The address of the token being purchased.
# @return Amount of Tokens (self.token) sold.
@public
def tokenToTokenSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_znn_sold: uint256(sigli), deadline: timestamp, token_addr: address) -> uint256:
    exchange_addr: address = self.factory.getExchange(token_addr)
    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_znn_sold, deadline, msg.sender, msg.sender, exchange_addr)

# @notice Convert Tokens (self.token) to Tokens (token_addr) and transfers
#         Tokens (token_addr) to recipient.
# @dev User specifies maximum input and exact output.
# @param tokens_bought Amount of Tokens (token_addr) bought.
# @param max_tokens_sold Maximum Tokens (self.token) sold.
# @param max_znn_sold Maximum znn purchased as intermediary.
# @param deadline Time after which this transaction can no longer be executed.
# @param recipient The address that receives output znn.
# @param token_addr The address of the token being purchased.
# @return Amount of Tokens (self.token) sold.
@public
def tokenToTokenTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_znn_sold: uint256(sigli), deadline: timestamp, recipient: address, token_addr: address) -> uint256:
    exchange_addr: address = self.factory.getExchange(token_addr)
    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_znn_sold, deadline, msg.sender, recipient, exchange_addr)

# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token).
# @dev Allows trades through contracts that were not deployed from the same factory.
# @dev User specifies exact input and minimum output.
# @param tokens_sold Amount of Tokens sold.
# @param min_tokens_bought Minimum Tokens (token_addr) purchased.
# @param min_znn_bought Minimum znn purchased as intermediary.
# @param deadline Time after which this transaction can no longer be executed.
# @param exchange_addr The address of the exchange for the token being purchased.
# @return Amount of Tokens (exchange_addr.token) bought.
@public
def tokenToExchangeSwapInput(tokens_sold: uint256, min_tokens_bought: uint256, min_znn_bought: uint256(sigli), deadline: timestamp, exchange_addr: address) -> uint256:
    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_znn_bought, deadline, msg.sender, msg.sender, exchange_addr)

# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers
#         Tokens (exchange_addr.token) to recipient.
# @dev Allows trades through contracts that were not deployed from the same factory.
# @dev User specifies exact input and minimum output.
# @param tokens_sold Amount of Tokens sold.
# @param min_tokens_bought Minimum Tokens (token_addr) purchased.
# @param min_znn_bought Minimum znn purchased as intermediary.
# @param deadline Time after which this transaction can no longer be executed.
# @param recipient The address that receives output znn.
# @param exchange_addr The address of the exchange for the token being purchased.
# @return Amount of Tokens (exchange_addr.token) bought.
@public
def tokenToExchangeTransferInput(tokens_sold: uint256, min_tokens_bought: uint256, min_znn_bought: uint256(sigli), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256:
    assert recipient != self
    return self.tokenToTokenInput(tokens_sold, min_tokens_bought, min_znn_bought, deadline, msg.sender, recipient, exchange_addr)

# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token).
# @dev Allows trades through contracts that were not deployed from the same factory.
# @dev User specifies maximum input and exact output.
# @param tokens_bought Amount of Tokens (token_addr) bought.
# @param max_tokens_sold Maximum Tokens (self.token) sold.
# @param max_znn_sold Maximum znn purchased as intermediary.
# @param deadline Time after which this transaction can no longer be executed.
# @param exchange_addr The address of the exchange for the token being purchased.
# @return Amount of Tokens (self.token) sold.
@public
def tokenToExchangeSwapOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_znn_sold: uint256(sigli), deadline: timestamp, exchange_addr: address) -> uint256:
    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_znn_sold, deadline, msg.sender, msg.sender, exchange_addr)

# @notice Convert Tokens (self.token) to Tokens (exchange_addr.token) and transfers
#         Tokens (exchange_addr.token) to recipient.
# @dev Allows trades through contracts that were not deployed from the same factory.
# @dev User specifies maximum input and exact output.
# @param tokens_bought Amount of Tokens (token_addr) bought.
# @param max_tokens_sold Maximum Tokens (self.token) sold.
# @param max_znn_sold Maximum znn purchased as intermediary.
# @param deadline Time after which this transaction can no longer be executed.
# @param recipient The address that receives output znn.
# @param token_addr The address of the token being purchased.
# @return Amount of Tokens (self.token) sold.
@public
def tokenToExchangeTransferOutput(tokens_bought: uint256, max_tokens_sold: uint256, max_znn_sold: uint256(sigli), deadline: timestamp, recipient: address, exchange_addr: address) -> uint256:
    assert recipient != self
    return self.tokenToTokenOutput(tokens_bought, max_tokens_sold, max_znn_sold, deadline, msg.sender, recipient, exchange_addr)

# @notice Public price function for znn to Token trades with an exact input.
# @param znn_sold Amount of znn sold.
# @return Amount of Tokens that can be bought with input znn.
@public
@constant
def getznnToTokenInputPrice(znn_sold: uint256(sigli)) -> uint256:
    assert znn_sold > 0
    token_reserve: uint256 = self.token.balanceOf(self)
    return self.getInputPrice(as_unitless_number(znn_sold), as_unitless_number(self.balance), token_reserve)

# @notice Public price function for znn to Token trades with an exact output.
# @param tokens_bought Amount of Tokens bought.
# @return Amount of znn needed to buy output Tokens.
@public
@constant
def getznnToTokenOutputPrice(tokens_bought: uint256) -> uint256(sigli):
    assert tokens_bought > 0
    token_reserve: uint256 = self.token.balanceOf(self)
    znn_sold: uint256 = self.getOutputPrice(tokens_bought, as_unitless_number(self.balance), token_reserve)
    return as_sigli_value(znn_sold, 'sigli')

# @notice Public price function for Token to znn trades with an exact input.
# @param tokens_sold Amount of Tokens sold.
# @return Amount of znn that can be bought with input Tokens.
@public
@constant
def getTokenToznnInputPrice(tokens_sold: uint256) -> uint256(sigli):
    assert tokens_sold > 0
    token_reserve: uint256 = self.token.balanceOf(self)
    znn_bought: uint256 = self.getInputPrice(tokens_sold, token_reserve, as_unitless_number(self.balance))
    return as_sigli_value(znn_bought, 'sigli')

# @notice Public price function for Token to znn trades with an exact output.
# @param znn_bought Amount of output znn.
# @return Amount of Tokens needed to buy output znn.
@public
@constant
def getTokenToznnOutputPrice(znn_bought: uint256(sigli)) -> uint256:
    assert znn_bought > 0
    token_reserve: uint256 = self.token.balanceOf(self)
    return self.getOutputPrice(as_unitless_number(znn_bought), token_reserve, as_unitless_number(self.balance))

# @return Address of Token that is sold on this exchange.
@public
@constant
def tokenAddress() -> address:
    return self.token

# @return Address of factory that created this exchange.
@public
@constant
def factoryAddress() -> address(Factory):
    return self.factory

# zts compatibility for exchange liquidity modified from
# https://github.com/znnereum/vyper/blob/master/examples/tokens/zts.vy
@public
@constant
def balanceOf(_owner : address) -> uint256:
    return self.balances[_owner]

@public
def transfer(_to : address, _value : uint256) -> bool:
    self.balances[msg.sender] -= _value
    self.balances[_to] += _value
    log.Transfer(msg.sender, _to, _value)
    return True

@public
def transferFrom(_from : address, _to : address, _value : uint256) -> bool:
    self.balances[_from] -= _value
    self.balances[_to] += _value
    self.allowances[_from][msg.sender] -= _value
    log.Transfer(_from, _to, _value)
    return True

@public
def approve(_spender : address, _value : uint256) -> bool:
    self.allowances[msg.sender][_spender] = _value
    log.Approval(msg.sender, _spender, _value)
    return True

@public
@constant
def allowance(_owner : address, _spender : address) -> uint256:
    return self.allowances[_owner][_spender]